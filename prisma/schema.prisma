generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  admin
  manager
  seller
}

enum SurveyType {
  nps
  csat
  likert
  emoji
  thumbs
}

model Entity {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  users  User[]
  stores Store[]

  @@map("entities")
}

model User {
  id                  Int       @id @default(autoincrement())
  entity_id           Int
  name                String
  email               String    @unique
  password_hash       String
  role                UserRole
  reset_token         String?
  reset_token_expires DateTime?
  created_at          DateTime  @default(now())
  updated_at          DateTime?
  deleted_at          DateTime?

  entity Entity @relation(fields: [entity_id], references: [id])

  surveys Survey[]

  @@map("users")
}

model Store {
  id         Int       @id @default(autoincrement())
  entity_id  Int
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  entity Entity @relation(fields: [entity_id], references: [id])

  sellers Seller[]

  @@unique([entity_id, name])
  @@map("stores")
}

model Seller {
  id         Int       @id @default(autoincrement())
  store_id   Int
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  store Store @relation(fields: [store_id], references: [id])

  surveys Survey[]

  @@map("sellers")
}

model Survey {
  id            Int        @id @default(autoincrement())
  seller_id     Int
  created_by    Int
  name          String
  type          SurveyType
  scale_min     Int        @default(1)
  scale_max     Int        @default(10)
  allow_comment Boolean    @default(true)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime?
  deleted_at    DateTime?

  seller Seller @relation(fields: [seller_id], references: [id])
  owner  User   @relation(fields: [created_by], references: [id])

  responses SurveyResponse[]

  @@map("surveys")
}

model SurveyResponse {
  id         Int       @id @default(autoincrement())
  survey_id  Int
  score      Int
  comment    String?
  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  survey Survey @relation(fields: [survey_id], references: [id])

  @@map("survey_responses")
}
